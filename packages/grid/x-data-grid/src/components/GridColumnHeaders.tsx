import * as React from 'react';
import PropTypes from 'prop-types';
import { refType } from '@mui/utils';
import { fastMemo } from '../utils/fastMemo';
import {
  useGridColumnHeaders,
  UseGridColumnHeadersProps,
} from '../hooks/features/columnHeaders/useGridColumnHeaders';
import { EMPTY_PINNED_COLUMNS } from '../hooks/features/virtualization/useGridVirtualScroller';
import { GridBaseColumnHeaders } from './columnHeaders/GridBaseColumnHeaders';
import { GridColumnHeadersInner } from './columnHeaders/GridColumnHeadersInner';

interface Props
  extends React.HTMLAttributes<HTMLDivElement>,
    Omit<UseGridColumnHeadersProps, 'innerRef'> {
  innerRef?: React.Ref<HTMLDivElement>;
}

const GridColumnHeaders = React.forwardRef<HTMLDivElement, Props>(function GridColumnHeaders(
  props,
  ref,
) {
  const {
    innerRef,
    className,
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnPositions,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence,
    ...other
  } = props;

  const { isDragging, getInnerProps, getColumnHeaders, getColumnGroupHeaders } =
    useGridColumnHeaders({
      innerRef,
      visibleColumns,
      visiblePinnedColumns: EMPTY_PINNED_COLUMNS,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence,
    });

  return (
    <GridBaseColumnHeaders ref={ref} {...other}>
      <GridColumnHeadersInner isDragging={isDragging} {...getInnerProps()}>
        {getColumnGroupHeaders()}
        {getColumnHeaders()}
      </GridColumnHeadersInner>
    </GridBaseColumnHeaders>
  );
});

GridColumnHeaders.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  columnGroupHeaderFocus: PropTypes.shape({
    depth: PropTypes.number.isRequired,
    field: PropTypes.string.isRequired,
  }),
  columnGroupHeaderTabIndexState: PropTypes.shape({
    depth: PropTypes.number.isRequired,
    field: PropTypes.string.isRequired,
  }),
  columnGroupsHeaderStructure: PropTypes.arrayOf(
    PropTypes.arrayOf(
      PropTypes.shape({
        columnFields: PropTypes.arrayOf(PropTypes.string).isRequired,
        groupId: PropTypes.string,
      }),
    ),
  ).isRequired,
  columnHeaderFocus: PropTypes.shape({
    field: PropTypes.string.isRequired,
  }),
  columnHeaderTabIndexState: PropTypes.shape({
    field: PropTypes.string.isRequired,
  }),
  columnMenuState: PropTypes.shape({
    field: PropTypes.string,
    open: PropTypes.bool.isRequired,
  }).isRequired,
  columnPositions: PropTypes.arrayOf(PropTypes.number).isRequired,
  columnVisibility: PropTypes.object.isRequired,
  filterColumnLookup: PropTypes.object.isRequired,
  hasOtherElementInTabSequence: PropTypes.bool.isRequired,
  headerGroupingMaxDepth: PropTypes.number.isRequired,
  innerRef: refType,
  minColumnIndex: PropTypes.number,
  sortColumnLookup: PropTypes.object.isRequired,
  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired,
  visiblePinnedColumns: PropTypes.shape({
    left: PropTypes.arrayOf(
      PropTypes.shape({
        align: PropTypes.oneOf(['center', 'left', 'right']),
        cellClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
        colSpan: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),
        computedWidth: PropTypes.number.isRequired,
        description: PropTypes.string,
        disableColumnMenu: PropTypes.bool,
        disableExport: PropTypes.bool,
        disableReorder: PropTypes.bool,
        editable: PropTypes.bool,
        field: PropTypes.string.isRequired,
        filterable: PropTypes.bool,
        filterOperators: PropTypes.arrayOf(
          PropTypes.shape({
            getApplyFilterFn: PropTypes.func.isRequired,
            getValueAsString: PropTypes.func,
            headerLabel: PropTypes.string,
            InputComponent: PropTypes.elementType,
            InputComponentProps: PropTypes.object,
            label: PropTypes.string,
            requiresFilterValue: PropTypes.bool,
            value: PropTypes.string.isRequired,
          }),
        ),
        flex: PropTypes.number,
        getApplyQuickFilterFn: PropTypes.func,
        groupable: PropTypes.bool,
        hasBeenResized: PropTypes.bool,
        headerAlign: PropTypes.oneOf(['center', 'left', 'right']),
        headerClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
        headerName: PropTypes.string,
        hideable: PropTypes.bool,
        hideSortIcons: PropTypes.bool,
        maxWidth: PropTypes.number,
        minWidth: PropTypes.number,
        pinnable: PropTypes.bool,
        preProcessEditCellProps: PropTypes.func,
        renderCell: PropTypes.func,
        renderEditCell: PropTypes.func,
        renderHeader: PropTypes.func,
        resizable: PropTypes.bool,
        sortable: PropTypes.bool,
        sortComparator: PropTypes.func,
        sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),
        type: PropTypes.oneOfType([
          PropTypes.oneOf([
            'actions',
            'boolean',
            'date',
            'dateTime',
            'number',
            'singleSelect',
            'string',
          ]),
          PropTypes.shape({
            '__@iterator@570': PropTypes.func.isRequired,
            anchor: PropTypes.func.isRequired,
            at: PropTypes.func.isRequired,
            big: PropTypes.func.isRequired,
            blink: PropTypes.func.isRequired,
            bold: PropTypes.func.isRequired,
            charAt: PropTypes.func.isRequired,
            charCodeAt: PropTypes.func.isRequired,
            codePointAt: PropTypes.func.isRequired,
            concat: PropTypes.func.isRequired,
            endsWith: PropTypes.func.isRequired,
            fixed: PropTypes.func.isRequired,
            fontcolor: PropTypes.func.isRequired,
            fontsize: PropTypes.func.isRequired,
            includes: PropTypes.func.isRequired,
            indexOf: PropTypes.func.isRequired,
            italics: PropTypes.func.isRequired,
            lastIndexOf: PropTypes.func.isRequired,
            length: PropTypes.number.isRequired,
            link: PropTypes.func.isRequired,
            localeCompare: PropTypes.func.isRequired,
            match: PropTypes.func.isRequired,
            matchAll: PropTypes.func.isRequired,
            normalize: PropTypes.func.isRequired,
            padEnd: PropTypes.func.isRequired,
            padStart: PropTypes.func.isRequired,
            repeat: PropTypes.func.isRequired,
            replace: PropTypes.func.isRequired,
            replaceAll: PropTypes.func.isRequired,
            search: PropTypes.func.isRequired,
            slice: PropTypes.func.isRequired,
            small: PropTypes.func.isRequired,
            split: PropTypes.func.isRequired,
            startsWith: PropTypes.func.isRequired,
            strike: PropTypes.func.isRequired,
            sub: PropTypes.func.isRequired,
            substr: PropTypes.func.isRequired,
            substring: PropTypes.func.isRequired,
            sup: PropTypes.func.isRequired,
            toLocaleLowerCase: PropTypes.func.isRequired,
            toLocaleUpperCase: PropTypes.func.isRequired,
            toLowerCase: PropTypes.func.isRequired,
            toString: PropTypes.func.isRequired,
            toUpperCase: PropTypes.func.isRequired,
            trim: PropTypes.func.isRequired,
            trimEnd: PropTypes.func.isRequired,
            trimLeft: PropTypes.func.isRequired,
            trimRight: PropTypes.func.isRequired,
            trimStart: PropTypes.func.isRequired,
            valueOf: PropTypes.func.isRequired,
          }),
        ]),
        valueFormatter: PropTypes.func,
        valueGetter: PropTypes.func,
        valueParser: PropTypes.func,
        valueSetter: PropTypes.func,
        width: PropTypes.number,
      }),
    ).isRequired,
    right: PropTypes.arrayOf(
      PropTypes.shape({
        align: PropTypes.oneOf(['center', 'left', 'right']),
        cellClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
        colSpan: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),
        computedWidth: PropTypes.number.isRequired,
        description: PropTypes.string,
        disableColumnMenu: PropTypes.bool,
        disableExport: PropTypes.bool,
        disableReorder: PropTypes.bool,
        editable: PropTypes.bool,
        field: PropTypes.string.isRequired,
        filterable: PropTypes.bool,
        filterOperators: PropTypes.arrayOf(
          PropTypes.shape({
            getApplyFilterFn: PropTypes.func.isRequired,
            getValueAsString: PropTypes.func,
            headerLabel: PropTypes.string,
            InputComponent: PropTypes.elementType,
            InputComponentProps: PropTypes.object,
            label: PropTypes.string,
            requiresFilterValue: PropTypes.bool,
            value: PropTypes.string.isRequired,
          }),
        ),
        flex: PropTypes.number,
        getApplyQuickFilterFn: PropTypes.func,
        groupable: PropTypes.bool,
        hasBeenResized: PropTypes.bool,
        headerAlign: PropTypes.oneOf(['center', 'left', 'right']),
        headerClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
        headerName: PropTypes.string,
        hideable: PropTypes.bool,
        hideSortIcons: PropTypes.bool,
        maxWidth: PropTypes.number,
        minWidth: PropTypes.number,
        pinnable: PropTypes.bool,
        preProcessEditCellProps: PropTypes.func,
        renderCell: PropTypes.func,
        renderEditCell: PropTypes.func,
        renderHeader: PropTypes.func,
        resizable: PropTypes.bool,
        sortable: PropTypes.bool,
        sortComparator: PropTypes.func,
        sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),
        type: PropTypes.oneOfType([
          PropTypes.oneOf([
            'actions',
            'boolean',
            'date',
            'dateTime',
            'number',
            'singleSelect',
            'string',
          ]),
          PropTypes.shape({
            '__@iterator@570': PropTypes.func.isRequired,
            anchor: PropTypes.func.isRequired,
            at: PropTypes.func.isRequired,
            big: PropTypes.func.isRequired,
            blink: PropTypes.func.isRequired,
            bold: PropTypes.func.isRequired,
            charAt: PropTypes.func.isRequired,
            charCodeAt: PropTypes.func.isRequired,
            codePointAt: PropTypes.func.isRequired,
            concat: PropTypes.func.isRequired,
            endsWith: PropTypes.func.isRequired,
            fixed: PropTypes.func.isRequired,
            fontcolor: PropTypes.func.isRequired,
            fontsize: PropTypes.func.isRequired,
            includes: PropTypes.func.isRequired,
            indexOf: PropTypes.func.isRequired,
            italics: PropTypes.func.isRequired,
            lastIndexOf: PropTypes.func.isRequired,
            length: PropTypes.number.isRequired,
            link: PropTypes.func.isRequired,
            localeCompare: PropTypes.func.isRequired,
            match: PropTypes.func.isRequired,
            matchAll: PropTypes.func.isRequired,
            normalize: PropTypes.func.isRequired,
            padEnd: PropTypes.func.isRequired,
            padStart: PropTypes.func.isRequired,
            repeat: PropTypes.func.isRequired,
            replace: PropTypes.func.isRequired,
            replaceAll: PropTypes.func.isRequired,
            search: PropTypes.func.isRequired,
            slice: PropTypes.func.isRequired,
            small: PropTypes.func.isRequired,
            split: PropTypes.func.isRequired,
            startsWith: PropTypes.func.isRequired,
            strike: PropTypes.func.isRequired,
            sub: PropTypes.func.isRequired,
            substr: PropTypes.func.isRequired,
            substring: PropTypes.func.isRequired,
            sup: PropTypes.func.isRequired,
            toLocaleLowerCase: PropTypes.func.isRequired,
            toLocaleUpperCase: PropTypes.func.isRequired,
            toLowerCase: PropTypes.func.isRequired,
            toString: PropTypes.func.isRequired,
            toUpperCase: PropTypes.func.isRequired,
            trim: PropTypes.func.isRequired,
            trimEnd: PropTypes.func.isRequired,
            trimLeft: PropTypes.func.isRequired,
            trimRight: PropTypes.func.isRequired,
            trimStart: PropTypes.func.isRequired,
            valueOf: PropTypes.func.isRequired,
          }),
        ]),
        valueFormatter: PropTypes.func,
        valueGetter: PropTypes.func,
        valueParser: PropTypes.func,
        valueSetter: PropTypes.func,
        width: PropTypes.number,
      }),
    ).isRequired,
  }).isRequired,
} as any;

const MemoizedGridColumnHeaders = fastMemo(GridColumnHeaders);

export { MemoizedGridColumnHeaders as GridColumnHeaders };
